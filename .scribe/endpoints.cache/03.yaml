## Autogenerated by Scribe. DO NOT MODIFY.

name: Users
description: ''
endpoints:
  -
    httpMethods:
      - GET
    uri: 'api/users/{user_id}/posts'
    metadata:
      groupName: Users
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: ''
      description: ''
      authenticated: false
      deprecated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      user_id:
        name: user_id
        description: 'The ID of the user.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
    cleanUrlParameters:
      user_id: 1
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: '{"data":[{"id":4,"status":1,"user":{"id":1,"name":"test","created_at":"2025-09-10T10:22:57.000000Z","updated_at":"2025-09-10T10:22:57.000000Z"},"body":"bbb","created_at":"2025-09-11T11:08:32.000000Z","updated_at":"2025-09-11T11:08:32.000000Z"},{"id":5,"status":1,"user":{"id":1,"name":"test","created_at":"2025-09-10T10:22:57.000000Z","updated_at":"2025-09-10T10:22:57.000000Z"},"body":"b","created_at":"2025-09-11T11:09:35.000000Z","updated_at":"2025-09-11T11:09:35.000000Z"}]}'
        headers:
          cache-control: 'no-cache, private'
          content-type: application/json
          access-control-allow-origin: '*'
        description: null
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: 'api/users/{user_id}/posts/active'
    metadata:
      groupName: Users
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: ''
      description: ''
      authenticated: false
      deprecated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      user_id:
        name: user_id
        description: 'The ID of the user.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
    cleanUrlParameters:
      user_id: 1
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: '{"data":[{"id":4,"status":1,"user":{"id":1,"name":"test","created_at":"2025-09-10T10:22:57.000000Z","updated_at":"2025-09-10T10:22:57.000000Z"},"body":"bbb","created_at":"2025-09-11T11:08:32.000000Z","updated_at":"2025-09-11T11:08:32.000000Z"},{"id":5,"status":1,"user":{"id":1,"name":"test","created_at":"2025-09-10T10:22:57.000000Z","updated_at":"2025-09-10T10:22:57.000000Z"},"body":"b","created_at":"2025-09-11T11:09:35.000000Z","updated_at":"2025-09-11T11:09:35.000000Z"}]}'
        headers:
          cache-control: 'no-cache, private'
          content-type: application/json
          access-control-allow-origin: '*'
        description: null
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: 'api/users/{user_id}/comments'
    metadata:
      groupName: Users
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: ''
      description: ''
      authenticated: false
      deprecated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      user_id:
        name: user_id
        description: 'The ID of the user.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
    cleanUrlParameters:
      user_id: 1
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: '{"data":[{"id":1,"body":"my comment","post":{"id":2,"status":1,"body":"test","created_at":null,"updated_at":null},"created_at":"2025-09-10T11:08:56.000000Z","updated_at":"2025-09-10T11:08:56.000000Z"},{"id":2,"body":"my comment 2","post":{"id":2,"status":1,"body":"test","created_at":null,"updated_at":null},"created_at":"2025-09-10T11:09:10.000000Z","updated_at":"2025-09-10T11:09:10.000000Z"},{"id":3,"body":"new reply2","created_at":"2025-09-10T11:10:24.000000Z","updated_at":"2025-09-10T11:25:47.000000Z"},{"id":6,"body":"new reply","created_at":"2025-09-10T11:11:07.000000Z","updated_at":"2025-09-10T11:11:07.000000Z"},{"id":7,"body":"new reply33","post":{"id":2,"status":1,"body":"test","created_at":null,"updated_at":null},"created_at":"2025-09-10T13:47:32.000000Z","updated_at":"2025-09-10T13:47:32.000000Z"},{"id":8,"body":"new reply444","created_at":"2025-09-10T13:50:38.000000Z","updated_at":"2025-09-10T13:50:38.000000Z"},{"id":9,"body":"first post45","created_at":"2025-09-10T14:03:36.000000Z","updated_at":"2025-09-10T14:03:36.000000Z"},{"id":10,"body":"another reply","created_at":"2025-09-10T14:27:04.000000Z","updated_at":"2025-09-10T14:27:04.000000Z"},{"id":11,"body":"another reply","created_at":"2025-09-10T14:27:16.000000Z","updated_at":"2025-09-10T14:27:16.000000Z"},{"id":12,"body":"another reply","created_at":"2025-09-10T14:27:17.000000Z","updated_at":"2025-09-10T14:27:17.000000Z"},{"id":13,"body":"another reply","created_at":"2025-09-10T14:27:23.000000Z","updated_at":"2025-09-10T14:27:23.000000Z"},{"id":14,"body":"another reply","created_at":"2025-09-10T14:27:24.000000Z","updated_at":"2025-09-10T14:27:24.000000Z"}]}'
        headers:
          cache-control: 'no-cache, private'
          content-type: application/json
          access-control-allow-origin: '*'
        description: null
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: api/user/comments
    metadata:
      groupName: Users
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: ''
      description: ''
      authenticated: true
      deprecated: false
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 401
        content: '{"message":"Unauthenticated."}'
        headers:
          cache-control: 'no-cache, private'
          content-type: application/json
          access-control-allow-origin: '*'
        description: null
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer 6g43cv8PD1aE5beadkZfhV6'
    controller: null
    method: null
    route: null
    custom: []
